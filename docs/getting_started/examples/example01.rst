
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting_started\examples\example01.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_getting_started_examples_example01.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting_started_examples_example01.py:


Example 1 - Planar Dipping Layers
=================================

.. GENERATED FROM PYTHON SOURCE LINES 8-22

This example will show how to convert the geological map below using
``GemGIS`` to a ``GemPy`` model. This example is based on digitized
data. The area is 972 m wide (W-E extent) and 1069 m high (N-S extent).
The vertical model extents varies between 300 m and 800 m. The model
represents two planar stratigraphic units (blue and red) dipping towards
the south above an unspecified basement (yellow). The map has been
georeferenced with QGIS. The stratigraphic boundaries were digitized in
QGIS. Strikes lines were digitized in QGIS as well and were used to
calculate orientations for the ``GemPy`` model. These will be loaded
into the model directly. The contour lines were also digitized and will
be interpolated with ``GemGIS`` to create a topography for the model.

Map Source: Unknown


.. GENERATED FROM PYTHON SOURCE LINES 24-33

.. code-block:: default

    import matplotlib.pyplot as plt
    import matplotlib.image as mpimg
    img = mpimg.imread('../../docs/getting_started/images/cover.png')
    plt.figure(figsize=(10, 10))
    imgplot = plt.imshow(img)
    plt.axis('off')
    plt.tight_layout()





.. image:: /getting_started/examples/images/sphx_glr_example01_001.png
    :alt: example01
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 34-42

Import GemGIS
-------------

If you have installed ``GemGIS`` via pip, you can import ``GemGIS`` like
any other package. If you have downloaded the repository, append the
path to the directory where the ``GemGIS`` repository is stored and then
import ``GemGIS``.


.. GENERATED FROM PYTHON SOURCE LINES 44-49

.. code-block:: default

    import warnings
    warnings.filterwarnings("ignore")
    import gemgis as gg









.. GENERATED FROM PYTHON SOURCE LINES 50-58

Importing Libraries and loading Data
------------------------------------

All remaining packages can be loaded in order to prepare the data and to
construct the model. The example data is downloaded from an external
server using ``pooch``. It will be stored in a data folder in the same
directory where this notebook is stored.


.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: default

    import geopandas as gpd
    import rasterio








.. GENERATED FROM PYTHON SOURCE LINES 64-68

.. code-block:: default

    file_path = 'data/example01/'
    gg.download_gemgis_data.download_tutorial_data(filename="example01_planar_dipping_layers.zip", dirpath=file_path)









.. GENERATED FROM PYTHON SOURCE LINES 69-77

Creating Digital Elevation Model from Contour Lines
---------------------------------------------------

The digital elevation model (DEM) will be created by interpolating
contour lines digitized from the georeferenced map using the ``SciPy``
Radial Basis Function interpolation wrapped in ``GemGIS``. The
respective function used for that is ``gg.vector.interpolate_raster()``.


.. GENERATED FROM PYTHON SOURCE LINES 79-85

.. code-block:: default

    img = mpimg.imread('../../docs/getting_started/images/dem_example1.png')
    plt.figure(figsize=(10, 10))
    imgplot = plt.imshow(img)
    plt.axis('off')
    plt.tight_layout()




.. image:: /getting_started/examples/images/sphx_glr_example01_002.png
    :alt: example01
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 86-90

.. code-block:: default

    topo = gpd.read_file(file_path + 'topo1.shp')
    topo.head()







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>id</th>
          <th>Z</th>
          <th>geometry</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>None</td>
          <td>400</td>
          <td>LINESTRING (0.741 475.441, 35.629 429.247, 77....</td>
        </tr>
        <tr>
          <th>1</th>
          <td>None</td>
          <td>300</td>
          <td>LINESTRING (645.965 0.525, 685.141 61.866, 724...</td>
        </tr>
        <tr>
          <th>2</th>
          <td>None</td>
          <td>400</td>
          <td>LINESTRING (490.292 0.525, 505.756 40.732, 519...</td>
        </tr>
        <tr>
          <th>3</th>
          <td>None</td>
          <td>600</td>
          <td>LINESTRING (911.433 1068.585, 908.856 1026.831...</td>
        </tr>
        <tr>
          <th>4</th>
          <td>None</td>
          <td>700</td>
          <td>LINESTRING (228.432 1068.585, 239.772 1017.037...</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 91-94

Interpolating the contour lines
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 96-99

.. code-block:: default

    topo_raster = gg.vector.interpolate_raster(gdf=topo, value='Z', method='rbf', res=5)









.. GENERATED FROM PYTHON SOURCE LINES 100-103

Plotting the raster
~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 105-118

.. code-block:: default

    import matplotlib.pyplot as plt

    fix, ax = plt.subplots(1, figsize=(10, 10))
    topo.plot(ax=ax, aspect='equal', column='Z', cmap='gist_earth')
    im = plt.imshow(topo_raster, origin='lower', extent=[0, 972, 0, 1069], cmap='gist_earth')
    cbar = plt.colorbar(im)
    cbar.set_label('Altitude [m]')
    plt.xlabel('X [m]')
    plt.ylabel('Y [m]')
    plt.xlim(0, 972)
    plt.ylim(0, 1069)





.. image:: /getting_started/examples/images/sphx_glr_example01_003.png
    :alt: example01
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (0.0, 1069.0)



.. GENERATED FROM PYTHON SOURCE LINES 119-126

Saving the raster to disc
~~~~~~~~~~~~~~~~~~~~~~~~~

After the interpolation of the contour lines, the raster is saved to
disc using ``gg.raster.save_as_tiff()``. The function will not be
executed as a raster is already provided with the example data.


.. GENERATED FROM PYTHON SOURCE LINES 129-135

Opening Raster
~~~~~~~~~~~~~~

The previously computed and saved raster can now be opened using
rasterio.


.. GENERATED FROM PYTHON SOURCE LINES 137-140

.. code-block:: default

    topo_raster = rasterio.open(file_path + 'raster1.tif')









.. GENERATED FROM PYTHON SOURCE LINES 141-152

Interface Points of stratigraphic boundaries
--------------------------------------------

The interface points will be extracted from LineStrings digitized from
the georeferenced map using QGIS. It is important to provide a formation
name for each layer boundary. The vertical position of the interface
point will be extracted from the digital elevation model using the
``GemGIS`` function ``gg.vector.extract_xyz()``. The resulting
GeoDataFrame now contains single points including the information about
the respective formation.


.. GENERATED FROM PYTHON SOURCE LINES 154-160

.. code-block:: default

    img = mpimg.imread('../../docs/getting_started/images/interfaces_example1.png')
    plt.figure(figsize=(10, 10))
    imgplot = plt.imshow(img)
    plt.axis('off')
    plt.tight_layout()




.. image:: /getting_started/examples/images/sphx_glr_example01_004.png
    :alt: example01
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 161-165

.. code-block:: default

    interfaces = gpd.read_file(file_path + 'interfaces1_lines.shp')
    interfaces.head()







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>id</th>
          <th>formation</th>
          <th>geometry</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>None</td>
          <td>Sand1</td>
          <td>LINESTRING (0.256 264.862, 10.593 276.734, 17....</td>
        </tr>
        <tr>
          <th>1</th>
          <td>None</td>
          <td>Ton</td>
          <td>LINESTRING (0.188 495.787, 8.841 504.142, 41.0...</td>
        </tr>
        <tr>
          <th>2</th>
          <td>None</td>
          <td>Ton</td>
          <td>LINESTRING (970.677 833.053, 959.372 800.023, ...</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 166-169

Extracting Z coordinate from Digital Elevation Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 171-175

.. code-block:: default

    interfaces_coords = gg.vector.extract_xyz(gdf=interfaces, dem=topo_raster)
    interfaces_coords







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>formation</th>
          <th>geometry</th>
          <th>X</th>
          <th>Y</th>
          <th>Z</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>Sand1</td>
          <td>POINT (0.256 264.862)</td>
          <td>0.26</td>
          <td>264.86</td>
          <td>353.97</td>
        </tr>
        <tr>
          <th>1</th>
          <td>Sand1</td>
          <td>POINT (10.593 276.734)</td>
          <td>10.59</td>
          <td>276.73</td>
          <td>359.04</td>
        </tr>
        <tr>
          <th>2</th>
          <td>Sand1</td>
          <td>POINT (17.135 289.090)</td>
          <td>17.13</td>
          <td>289.09</td>
          <td>364.28</td>
        </tr>
        <tr>
          <th>3</th>
          <td>Sand1</td>
          <td>POINT (19.150 293.313)</td>
          <td>19.15</td>
          <td>293.31</td>
          <td>364.99</td>
        </tr>
        <tr>
          <th>4</th>
          <td>Sand1</td>
          <td>POINT (27.795 310.572)</td>
          <td>27.80</td>
          <td>310.57</td>
          <td>372.81</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>126</th>
          <td>Ton</td>
          <td>POINT (636.023 859.788)</td>
          <td>636.02</td>
          <td>859.79</td>
          <td>618.32</td>
        </tr>
        <tr>
          <th>127</th>
          <td>Ton</td>
          <td>POINT (608.851 912.396)</td>
          <td>608.85</td>
          <td>912.40</td>
          <td>647.91</td>
        </tr>
        <tr>
          <th>128</th>
          <td>Ton</td>
          <td>POINT (560.110 990.617)</td>
          <td>560.11</td>
          <td>990.62</td>
          <td>697.06</td>
        </tr>
        <tr>
          <th>129</th>
          <td>Ton</td>
          <td>POINT (526.375 1045.388)</td>
          <td>526.38</td>
          <td>1045.39</td>
          <td>724.56</td>
        </tr>
        <tr>
          <th>130</th>
          <td>Ton</td>
          <td>POINT (512.240 1067.951)</td>
          <td>512.24</td>
          <td>1067.95</td>
          <td>734.76</td>
        </tr>
      </tbody>
    </table>
    <p>131 rows × 5 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 176-179

Plotting the Interface Points
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 181-192

.. code-block:: default

    fig, ax = plt.subplots(1, figsize=(10, 10))

    interfaces.plot(ax=ax, column='formation', legend=True, aspect='equal')
    interfaces_coords.plot(ax=ax, column='formation', legend=True, aspect='equal')
    plt.grid()
    plt.xlabel('X [m]')
    plt.ylabel('Y [m]')
    plt.xlim(0, 972)
    plt.ylim(0, 1069)





.. image:: /getting_started/examples/images/sphx_glr_example01_005.png
    :alt: example01
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (0.0, 1069.0)



.. GENERATED FROM PYTHON SOURCE LINES 193-213

Orientations from Strike Lines
------------------------------

Strike lines connect outcropping stratigraphic boundaries (interfaces)
of the same altitude. In other words: the intersections between
topographic contours and stratigraphic boundaries at the surface. The
height difference and the horizontal difference between two digitized
lines is used to calculate the dip and azimuth and hence an orientation
that is necessary for ``GemPy``. In order to calculate the orientations,
each set of strikes lines/LineStrings for one formation must be given an
id number next to the altitude of the strike line. The id field is
already predefined in QGIS. The strike line with the lowest altitude
gets the id number ``1``, the strike line with the highest altitude the
the number according to the number of digitized strike lines. It is
currently recommended to use one set of strike lines for each structural
element of one formation as illustrated.

For this example, the orientations were calculated beforehand and will
just be loaded into ``GemPy``.


.. GENERATED FROM PYTHON SOURCE LINES 215-221

.. code-block:: default

    img = mpimg.imread('../../docs/getting_started/images/orientations_example1.png')
    plt.figure(figsize=(10, 10))
    imgplot = plt.imshow(img)
    plt.axis('off')
    plt.tight_layout()




.. image:: /getting_started/examples/images/sphx_glr_example01_006.png
    :alt: example01
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 222-228

.. code-block:: default

    orientations = gpd.read_file(file_path + 'orientations1.shp')
    orientations = gg.vector.extract_xyz(gdf=orientations, dem=topo_raster)
    orientations['polarity'] = 1
    orientations







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>formation</th>
          <th>dip</th>
          <th>azimuth</th>
          <th>geometry</th>
          <th>X</th>
          <th>Y</th>
          <th>Z</th>
          <th>polarity</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>Ton</td>
          <td>30.50</td>
          <td>180.00</td>
          <td>POINT (96.471 451.564)</td>
          <td>96.47</td>
          <td>451.56</td>
          <td>440.59</td>
          <td>1</td>
        </tr>
        <tr>
          <th>1</th>
          <td>Ton</td>
          <td>30.50</td>
          <td>180.00</td>
          <td>POINT (172.761 661.877)</td>
          <td>172.76</td>
          <td>661.88</td>
          <td>556.38</td>
          <td>1</td>
        </tr>
        <tr>
          <th>2</th>
          <td>Ton</td>
          <td>30.50</td>
          <td>180.00</td>
          <td>POINT (383.074 957.758)</td>
          <td>383.07</td>
          <td>957.76</td>
          <td>729.02</td>
          <td>1</td>
        </tr>
        <tr>
          <th>3</th>
          <td>Ton</td>
          <td>30.50</td>
          <td>180.00</td>
          <td>POINT (592.356 722.702)</td>
          <td>592.36</td>
          <td>722.70</td>
          <td>601.55</td>
          <td>1</td>
        </tr>
        <tr>
          <th>4</th>
          <td>Ton</td>
          <td>30.50</td>
          <td>180.00</td>
          <td>POINT (766.586 348.469)</td>
          <td>766.59</td>
          <td>348.47</td>
          <td>378.63</td>
          <td>1</td>
        </tr>
        <tr>
          <th>5</th>
          <td>Ton</td>
          <td>30.50</td>
          <td>180.00</td>
          <td>POINT (843.907 167.023)</td>
          <td>843.91</td>
          <td>167.02</td>
          <td>282.61</td>
          <td>1</td>
        </tr>
        <tr>
          <th>6</th>
          <td>Ton</td>
          <td>30.50</td>
          <td>180.00</td>
          <td>POINT (941.846 428.883)</td>
          <td>941.85</td>
          <td>428.88</td>
          <td>423.45</td>
          <td>1</td>
        </tr>
        <tr>
          <th>7</th>
          <td>Ton</td>
          <td>30.50</td>
          <td>180.00</td>
          <td>POINT (22.142 299.553)</td>
          <td>22.14</td>
          <td>299.55</td>
          <td>368.05</td>
          <td>1</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 229-232

Plotting the Orientations
~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 234-246

.. code-block:: default

    fig, ax = plt.subplots(1, figsize=(10, 10))

    interfaces.plot(ax=ax, column='formation', legend=True, aspect='equal')
    interfaces_coords.plot(ax=ax, column='formation', legend=True, aspect='equal')
    orientations.plot(ax=ax, color='red', aspect='equal')
    plt.grid()
    plt.xlabel('X [m]')
    plt.ylabel('Y [m]')
    plt.xlim(0, 972)
    plt.ylim(0, 1069)





.. image:: /getting_started/examples/images/sphx_glr_example01_007.png
    :alt: example01
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (0.0, 1069.0)



.. GENERATED FROM PYTHON SOURCE LINES 247-253

GemPy Model Construction
------------------------

The structural geological model will be constructed using the ``GemPy``
package.


.. GENERATED FROM PYTHON SOURCE LINES 255-258

.. code-block:: default

    import gempy as gp






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    WARNING (theano.configdefaults): g++ not available, if using conda: `conda install m2w64-toolchain`
    WARNING (theano.configdefaults): g++ not detected ! Theano will be unable to execute optimized C-implementations (for both CPU and GPU) and will default to Python implementations. Performance will be severely degraded. To remove this warning, set Theano flags cxx to an empty string.
    WARNING (theano.tensor.blas): Using NumPy C-API based implementation for BLAS functions.




.. GENERATED FROM PYTHON SOURCE LINES 259-262

Creating new Model
~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 264-268

.. code-block:: default

    geo_model = gp.create_model('Model1')
    geo_model






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Model1  2021-04-18 18:50



.. GENERATED FROM PYTHON SOURCE LINES 269-272

Initiate Data
~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 274-280

.. code-block:: default

    gp.init_data(geo_model, [0, 972, 0, 1069, 300, 800], [100, 100, 100],
                 surface_points_df=interfaces_coords,
                 orientations_df=orientations,
                 default_values=True)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Active grids: ['regular']

    Model1  2021-04-18 18:50



.. GENERATED FROM PYTHON SOURCE LINES 281-284

Model Surfaces
~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 286-289

.. code-block:: default

    geo_model.surfaces







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style  type="text/css" >
    #T_9a8e1_row0_col3{
                background-color:  #015482;
            }#T_9a8e1_row1_col3{
                background-color:  #9f0052;
            }</style><table id="T_9a8e1_" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >surface</th>        <th class="col_heading level0 col1" >series</th>        <th class="col_heading level0 col2" >order_surfaces</th>        <th class="col_heading level0 col3" >color</th>        <th class="col_heading level0 col4" >id</th>    </tr></thead><tbody>
                    <tr>
                            <th id="T_9a8e1_level0_row0" class="row_heading level0 row0" >0</th>
                            <td id="T_9a8e1_row0_col0" class="data row0 col0" >Sand1</td>
                            <td id="T_9a8e1_row0_col1" class="data row0 col1" >Default series</td>
                            <td id="T_9a8e1_row0_col2" class="data row0 col2" >1</td>
                            <td id="T_9a8e1_row0_col3" class="data row0 col3" >#015482</td>
                            <td id="T_9a8e1_row0_col4" class="data row0 col4" >1</td>
                </tr>
                <tr>
                            <th id="T_9a8e1_level0_row1" class="row_heading level0 row1" >1</th>
                            <td id="T_9a8e1_row1_col0" class="data row1 col0" >Ton</td>
                            <td id="T_9a8e1_row1_col1" class="data row1 col1" >Default series</td>
                            <td id="T_9a8e1_row1_col2" class="data row1 col2" >2</td>
                            <td id="T_9a8e1_row1_col3" class="data row1 col3" >#9f0052</td>
                            <td id="T_9a8e1_row1_col4" class="data row1 col4" >2</td>
                </tr>
        </tbody></table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 290-293

Mapping the Stack to Surfaces
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 295-301

.. code-block:: default

    gp.map_stack_to_surfaces(geo_model,
                             {'Strata': ('Sand1', 'Ton')},
                             remove_unused_series=True)
    geo_model.add_surfaces('Basement')







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style  type="text/css" >
    #T_f0331_row0_col3{
                background-color:  #015482;
            }#T_f0331_row1_col3{
                background-color:  #9f0052;
            }#T_f0331_row2_col3{
                background-color:  #ffbe00;
            }</style><table id="T_f0331_" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >surface</th>        <th class="col_heading level0 col1" >series</th>        <th class="col_heading level0 col2" >order_surfaces</th>        <th class="col_heading level0 col3" >color</th>        <th class="col_heading level0 col4" >id</th>    </tr></thead><tbody>
                    <tr>
                            <th id="T_f0331_level0_row0" class="row_heading level0 row0" >0</th>
                            <td id="T_f0331_row0_col0" class="data row0 col0" >Sand1</td>
                            <td id="T_f0331_row0_col1" class="data row0 col1" >Strata</td>
                            <td id="T_f0331_row0_col2" class="data row0 col2" >1</td>
                            <td id="T_f0331_row0_col3" class="data row0 col3" >#015482</td>
                            <td id="T_f0331_row0_col4" class="data row0 col4" >1</td>
                </tr>
                <tr>
                            <th id="T_f0331_level0_row1" class="row_heading level0 row1" >1</th>
                            <td id="T_f0331_row1_col0" class="data row1 col0" >Ton</td>
                            <td id="T_f0331_row1_col1" class="data row1 col1" >Strata</td>
                            <td id="T_f0331_row1_col2" class="data row1 col2" >2</td>
                            <td id="T_f0331_row1_col3" class="data row1 col3" >#9f0052</td>
                            <td id="T_f0331_row1_col4" class="data row1 col4" >2</td>
                </tr>
                <tr>
                            <th id="T_f0331_level0_row2" class="row_heading level0 row2" >2</th>
                            <td id="T_f0331_row2_col0" class="data row2 col0" >Basement</td>
                            <td id="T_f0331_row2_col1" class="data row2 col1" >Strata</td>
                            <td id="T_f0331_row2_col2" class="data row2 col2" >3</td>
                            <td id="T_f0331_row2_col3" class="data row2 col3" >#ffbe00</td>
                            <td id="T_f0331_row2_col4" class="data row2 col4" >3</td>
                </tr>
        </tbody></table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 302-305

Showing the Number of Data Points
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 307-310

.. code-block:: default

    gg.utils.show_number_of_data_points(geo_model=geo_model)







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style  type="text/css" >
    #T_cce08_row0_col3{
                background-color:  #015482;
            }#T_cce08_row1_col3{
                background-color:  #9f0052;
            }#T_cce08_row2_col3{
                background-color:  #ffbe00;
            }</style><table id="T_cce08_" ><thead>    <tr>        <th class="blank level0" ></th>        <th class="col_heading level0 col0" >surface</th>        <th class="col_heading level0 col1" >series</th>        <th class="col_heading level0 col2" >order_surfaces</th>        <th class="col_heading level0 col3" >color</th>        <th class="col_heading level0 col4" >id</th>        <th class="col_heading level0 col5" >No. of Interfaces</th>        <th class="col_heading level0 col6" >No. of Orientations</th>    </tr></thead><tbody>
                    <tr>
                            <th id="T_cce08_level0_row0" class="row_heading level0 row0" >0</th>
                            <td id="T_cce08_row0_col0" class="data row0 col0" >Sand1</td>
                            <td id="T_cce08_row0_col1" class="data row0 col1" >Strata</td>
                            <td id="T_cce08_row0_col2" class="data row0 col2" >1</td>
                            <td id="T_cce08_row0_col3" class="data row0 col3" >#015482</td>
                            <td id="T_cce08_row0_col4" class="data row0 col4" >1</td>
                            <td id="T_cce08_row0_col5" class="data row0 col5" >95</td>
                            <td id="T_cce08_row0_col6" class="data row0 col6" >0</td>
                </tr>
                <tr>
                            <th id="T_cce08_level0_row1" class="row_heading level0 row1" >1</th>
                            <td id="T_cce08_row1_col0" class="data row1 col0" >Ton</td>
                            <td id="T_cce08_row1_col1" class="data row1 col1" >Strata</td>
                            <td id="T_cce08_row1_col2" class="data row1 col2" >2</td>
                            <td id="T_cce08_row1_col3" class="data row1 col3" >#9f0052</td>
                            <td id="T_cce08_row1_col4" class="data row1 col4" >2</td>
                            <td id="T_cce08_row1_col5" class="data row1 col5" >36</td>
                            <td id="T_cce08_row1_col6" class="data row1 col6" >8</td>
                </tr>
                <tr>
                            <th id="T_cce08_level0_row2" class="row_heading level0 row2" >2</th>
                            <td id="T_cce08_row2_col0" class="data row2 col0" >Basement</td>
                            <td id="T_cce08_row2_col1" class="data row2 col1" >Strata</td>
                            <td id="T_cce08_row2_col2" class="data row2 col2" >3</td>
                            <td id="T_cce08_row2_col3" class="data row2 col3" >#ffbe00</td>
                            <td id="T_cce08_row2_col4" class="data row2 col4" >3</td>
                            <td id="T_cce08_row2_col5" class="data row2 col5" >0</td>
                            <td id="T_cce08_row2_col6" class="data row2 col6" >0</td>
                </tr>
        </tbody></table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 311-314

Loading Digital Elevation Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 316-319

.. code-block:: default

    geo_model.set_topography(source='gdal', filepath=file_path + 'raster1.tif')






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Cropped raster to geo_model.grid.extent.
    depending on the size of the raster, this can take a while...
    storing converted file...
    Active grids: ['regular' 'topography']

    Grid Object. Values: 
    array([[   4.86      ,    5.345     ,  302.5       ],
           [   4.86      ,    5.345     ,  307.5       ],
           [   4.86      ,    5.345     ,  312.5       ],
           ...,
           [ 970.056     , 1059.28181818,  622.0892334 ],
           [ 970.056     , 1063.16909091,  622.06713867],
           [ 970.056     , 1067.05636364,  622.05786133]])



.. GENERATED FROM PYTHON SOURCE LINES 320-323

Defining Custom Section
~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 325-329

.. code-block:: default

    custom_section = gpd.read_file(file_path + 'customsections1.shp')
    custom_section_dict = gg.utils.to_section_dict(custom_section, section_column='section')
    geo_model.set_section_grid(custom_section_dict)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Active grids: ['regular' 'topography' 'sections']


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>start</th>
          <th>stop</th>
          <th>resolution</th>
          <th>dist</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>Section1</th>
          <td>[1.372395262185787, 383.9794474025771]</td>
          <td>[970.9954955186289, 383.8831909730347]</td>
          <td>[100, 80]</td>
          <td>969.62</td>
        </tr>
      </tbody>
    </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 330-333

.. code-block:: default

    gp.plot.plot_section_traces(geo_model)





.. image:: /getting_started/examples/images/sphx_glr_example01_008.png
    :alt: Cell Number: -1 Direction: z
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <gempy.plot.visualization_2d.Plot2D object at 0x000002575232E6D0>



.. GENERATED FROM PYTHON SOURCE LINES 334-337

Plotting Input Data
~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 339-342

.. code-block:: default

    gp.plot_2d(geo_model, direction='z', show_lith=False, show_boundaries=False)
    plt.grid()




.. image:: /getting_started/examples/images/sphx_glr_example01_009.png
    :alt: Cell Number: mid Direction: z
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 343-346

.. code-block:: default

    gp.plot_3d(geo_model, image=False, plotter_type='basic', notebook=True)





.. image:: /getting_started/examples/images/sphx_glr_example01_010.png
    :alt: example01
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <PIL.Image.Image image mode=RGB size=1024x768 at 0x2575232E0D0>

    <gempy.plot.vista.GemPyToVista object at 0x000002570090D460>



.. GENERATED FROM PYTHON SOURCE LINES 347-350

Setting the Interpolator
~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 352-360

.. code-block:: default

    gp.set_interpolator(geo_model,
                        compile_theano=True,
                        theano_optimizer='fast_compile',
                        verbose=[],
                        update_kriging=False
                        )






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Compiling theano function...
    Level of Optimization:  fast_compile
    Device:  cpu
    Precision:  float64
    Number of faults:  0
    Compilation Done!
    Kriging values: 
                       values
    range             1528.9
    $C_o$           55655.83
    drift equations      [3]

    <gempy.core.interpolator.InterpolatorModel object at 0x0000025751BD8B80>



.. GENERATED FROM PYTHON SOURCE LINES 361-364

Computing Model
~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 366-369

.. code-block:: default

    sol = gp.compute_model(geo_model, compute_mesh=True)









.. GENERATED FROM PYTHON SOURCE LINES 370-373

Plotting Cross Sections
~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 375-377

.. code-block:: default

    gp.plot_2d(geo_model, section_names=['Section1'], show_topography=True, show_data=False)




.. image:: /getting_started/examples/images/sphx_glr_example01_011.png
    :alt: Section1
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <gempy.plot.visualization_2d.Plot2D object at 0x0000025703709AC0>



.. GENERATED FROM PYTHON SOURCE LINES 378-380

.. code-block:: default

    gp.plot_2d(geo_model, direction=['x', 'x', 'y', 'y'], cell_number=[25, 75, 25, 75], show_topography=True, show_data=False)




.. image:: /getting_started/examples/images/sphx_glr_example01_012.png
    :alt: Cell Number: 25 Direction: x, Cell Number: 75 Direction: x, Cell Number: 25 Direction: y, Cell Number: 75 Direction: y
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <gempy.plot.visualization_2d.Plot2D object at 0x0000025702CD31F0>



.. GENERATED FROM PYTHON SOURCE LINES 381-384

.. code-block:: default

    gpv = gp.plot_3d(geo_model, image=False, show_topography=True,
                     plotter_type='basic', notebook=True, show_lith=True)




.. image:: /getting_started/examples/images/sphx_glr_example01_013.png
    :alt: example01
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <PIL.Image.Image image mode=RGB size=1024x768 at 0x25700D90C10>





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  1.512 seconds)


.. _sphx_glr_download_getting_started_examples_example01.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example01.py <example01.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example01.ipynb <example01.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
